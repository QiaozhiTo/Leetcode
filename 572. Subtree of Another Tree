https://leetcode.com/problems/subtree-of-another-tree/description/

class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not root:return False
        if not subRoot:return True
        def same(root, subRoot):
            if not root and not subRoot:return True
            if not root or not subRoot:return False
            if root.val != subRoot.val:return False
            return same(root.left, subRoot.left) and same(root.right, subRoot.right)
        if same(root, subRoot):
            return True
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
